using System;

namespace PKHeX.Core;

/// <summary>
/// Thresholds and research tasks used for <see cref="GameVersion.PLA"/> Pok√©dex entries.
/// </summary>
public static class PokedexConstants8a
{
    public const int MaxPokedexResearchPoints = 60000;

    public static ReadOnlySpan<ushort> ResearchPointsForRank => new ushort[]
    {
        0, 500, 1800, 3500, 6000, 8500, 11000, 15000, 20000, 30000, 60000,
    };

    public static ReadOnlySpan<ushort> PokemonInfoIds => new ushort[]
    {
             0,    25,    26,    35,    36,    37,    38,    41,    42,    46,
            47,    54,    55,    63,    64,    65,    66,    67,    68,    72,
            73,    74,    75,    76,    77,    78,    81,    82,    92,    93,
            94,    95,   108,   111,   112,   113,   114,   122,   123,   125,
           126,   129,   130,   133,   134,   135,   136,   137,   143,   155,
           156,   169,   172,   173,   175,   176,   185,   190,   193,   196,
           197,   198,   200,   201,   207,   208,   212,   214,   215,   216,
           217,   220,   221,   223,   224,   226,   233,   234,   239,   240,
           242,   265,   266,   267,   268,   269,   280,   281,   282,   299,
           315,   339,   340,   355,   356,   358,   361,   362,   363,   364,
           365,   387,   388,   389,   390,   391,   392,   393,   394,   395,
           396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
           406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
           416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
           426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
           436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
           446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
           456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
           466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
           476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
           486,   487,   488,   489,   490,   491,   492,   493,   501,   502,
           548,   627,   641,   642,   645,   700,   704,   712,   722,   723,
           899,   900,   901,   902,   903,   904,   905,  2048,  2085,  2086,
          2106,  2107,  2148,  2149,  2205,  2249,  2259,  2263,  2460,  2461,
          2462,  2469,  2470,  2471,  2527,  2531,  2532,  2535,  2540,  2541,
          2551,  2597,  2618,  2619,  2676,  2689,  2690,  2693,  2753,  2754,
          2761,  2772,  2948,  2950,  2953,  4155,  4197,  4297,  4508,  4509,
          4510,  4575,  4589,  4645,  4646,  4809,  6345,  6623,  6637,  8393,
          8671,  8685, 10441, 10719, 10733, 12489, 12781, 14537, 14829, 16585,
         16877, 18633, 18925, 20681, 20973, 22729, 23021, 24777, 25069, 26825,
         27117, 28873, 29165, 30921, 31213, 32969, 33261, 35017, 35309, 37065,
         39113, 41161, 43209, 45257, 47305, 49353, 51401, 53449, 55497,
    };

    public static ReadOnlySpan<byte> PokemonInfoGenders => new byte[]
    {
        0x04, 0x03, 0x03, 0x08, 0x08, 0x08, 0x08, 0x03, 0x03, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x03, 0x03, 0x08, 0x08, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x03, 0x03, 0x20, 0x08, 0x08, 0x03, 0x08,
        0x08, 0x03, 0x03, 0x03, 0x08, 0x08, 0x08, 0x04, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x03, 0x03, 0x08, 0x08,
        0x08, 0x03, 0x08, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x08,
        0x03, 0x08, 0x03, 0x08, 0x03, 0x08, 0x04, 0x08, 0x08, 0x08,
        0x20, 0x08, 0x08, 0x03, 0x08, 0x03, 0x08, 0x08, 0x08, 0x08,
        0x03, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x08, 0x03, 0x08, 0x08, 0x08, 0x08, 0x08, 0x20, 0x10, 0x03,
        0x20, 0x03, 0x03, 0x03, 0x08, 0x08, 0x08, 0x08, 0x03, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x04, 0x04, 0x08, 0x08, 0x20, 0x08, 0x08, 0x03, 0x03, 0x03,
        0x08, 0x08, 0x08, 0x03, 0x03, 0x08, 0x08, 0x03, 0x03, 0x08,
        0x03, 0x03, 0x08, 0x03, 0x03, 0x03, 0x04, 0x08, 0x03, 0x03,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x03, 0x04, 0x10,
        0x08, 0x08, 0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08,
        0x04, 0x04, 0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08,
        0x20, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x10, 0x08, 0x08, 0x20, 0x04, 0x08, 0x08,
        0x08, 0x08, 0x04, 0x04, 0x08, 0x04, 0x08, 0x03, 0x08, 0x20,
        0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x08, 0x20, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x20, 0x20, 0x08, 0x04, 0x04, 0x08, 0x20,
        0x10, 0x04, 0x04, 0x20, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    };

    public static ReadOnlySpan<ushort> FormStorageIndexIds => new ushort[]
    {
            0,    25,    26,    35,    36,    37,    38,    41,    42,    46,    47,    54,    55,    63,    64,    65,
           66,    67,    68,    72,    73,    74,    75,    76,    77,    78,    81,    82,    92,    93,    94,    95,
          108,   111,   112,   113,   114,   122,   123,   125,   126,   129,   130,   133,   134,   135,   136,   137,
          143,   155,   156,   169,   172,   173,   175,   176,   185,   190,   193,   196,   197,   198,   200,   201,
          207,   208,   212,   214,   215,   216,   217,   220,   221,   223,   224,   226,   233,   234,   239,   240,
          242,   265,   266,   267,   268,   269,   280,   281,   282,   299,   315,   339,   340,   355,   356,   358,
          361,   362,   363,   364,   365,   387,   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
          398,   399,   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
          414,   415,   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
          430,   431,   432,   433,   434,   435,   436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
          446,   447,   448,   449,   450,   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
          462,   463,   464,   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
          478,   479,   480,   481,   482,   483,   484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
          501,   502,   548,   627,   641,   642,   645,   700,   704,   712,   722,   723,   899,   900,   901,   902,
          903,   904,   905,  2085,  2086,  2106,  2107,  2148,  2149,  2205,  2249,  2259,  2263,  2460,  2461,  2462,
         2469,  2470,  2471,  2527,  2531,  2532,  2535,  2540,  2541,  2551,  2597,  2618,  2619,  2676,  2689,  2690,
         2693,  2753,  2754,  2761,  2772,  2948,  2950,  2953,  4155,  4197,  4297,  4508,  4509,  4510,  4575,  4589,
         4645,  4646,  4809,  6345,  6623,  6637,  8393,  8671,  8685, 10441, 10719, 10733, 12489, 12781, 14537, 14829,
        16585, 16877, 18633, 18925, 20681, 20973, 22729, 23021, 24777, 25069, 26825, 27117, 28873, 29165, 30921, 31213,
        32969, 33261, 35017, 35309, 37065, 39113, 41161, 43209, 45257, 47305, 49353, 51401, 53449, 55497,
    };

    public static ReadOnlySpan<ushort> FormStorageIndexValues => new ushort[]
    {
          0,   1,   2,   3,   4,   5,   7,   9,  10,  11,  12,  13,  14,  18,  19,  20,
         21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
         40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
        100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
        118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
        134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
        150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167,
        170, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
        207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
        223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
        239, 240, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263,
        281, 282, 284, 290, 292, 294, 296, 298, 299, 302, 305, 306, 308, 309, 311, 312,
        314, 315, 316,   6,   8,  15,  16,  37,  38,  59,  73, 102, 106, 165, 168, 171,
        180, 182, 184, 241, 250, 252, 256, 262, 264, 283, 285, 288, 289, 291, 293, 295,
        297, 300, 301, 303, 307, 310, 313, 317,  17,  39,  74, 166, 169, 172, 242, 265,
        286, 287, 304,  75, 243, 266,  76, 244, 267,  77, 245, 268,  78, 269,  79, 270,
         80, 271,  81, 272,  82, 273,  83, 274,  84, 275,  85, 276,  86, 277,  87, 278,
         88, 279,  89, 280,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
    };

    public static readonly PokedexResearchTask8a[][] ResearchTasks = DeserializeResearchTasks(BinLinkerAccessor.Get(Util.GetBinaryResource("researchtask_la.pkl"), "la"));

    private static PokedexResearchTask8a[][] DeserializeResearchTasks(BinLinkerAccessor accessor)
    {
        var result = new PokedexResearchTask8a[accessor.Length][];
        for (var i = 0; i < result.Length; i++)
            result[i] = PokedexResearchTask8a.DeserializeFrom(accessor[i]);
        return result;
    }
}
